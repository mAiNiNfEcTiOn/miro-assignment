{"version":3,"sources":["src/emails-input/emails-input.js"],"names":["window","document","chars","charCode","push","String","fromCharCode","generateRandomEmail","size","email","charCounter","Math","floor","random","length","handleInputValue","config","value","store","split","forEach","item","trim","some","record","alreadyExists","emailField","createElement","type","isValid","checkValidity","node","insertAdjacentElement","Pill","containerDiv","span","button","className","textContent","innerHTML","addEventListener","e","pill","parentNode","idx","splice","querySelector","focus","removeChild","classList","add","stopPropagation","EmailsInput","container","subscriptions","emailsStore","rootDiv","Array","cb","event","data","prototype","call","pop","itemBeingRemoved","args","itemsBeingRemoved","map","input","Input","placeholder","currentTarget","indexOf","keyCode","pills","querySelectorAll","clipboardData","getData","preventDefault","getAllEmails","concat","addNewEmail","subscribe","replaceAllEmails","slice","numberExistingEmails","counter"],"mappings":"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","file":"emails-input.a7f3ff8c.js","sourceRoot":"..","sourcesContent":["import \"./emails-input.css\";\n\n/** IIFE :) */\n((window, document) => {\n\n  /** Initializes an array of chars to pick random chars from to create the e-mails */\n  const chars = [];\n  for (let charCode = 48; charCode <= 57; charCode += 1) {\n    chars.push(String.fromCharCode(charCode));\n  }\n\n  for (let charCode = 65; charCode <= 90; charCode += 1) {\n    chars.push(String.fromCharCode(charCode));\n  }\n\n  for (let charCode = 97; charCode <= 122; charCode += 1) {\n    chars.push(String.fromCharCode(charCode));\n  }\n\n  /**\n   * Generates a 'miro.com' e-mail where the left part is randomly generated.\n   * \n   * @function generateRandomEmail\n   * @param {number} size Number of characters to be randomly generated for the left side of the e-mail\n   * @returns {string} The random 'miro.com' e-mail\n   */\n  function generateRandomEmail(size = 8) {\n    let email = \"\";\n    for (let charCounter = 0; charCounter < size; charCounter += 1) {\n      email += chars[Math.floor(Math.random() * chars.length)];\n    }\n\n    email += \"@miro.com\";\n\n    return email;\n  }\n\n  /**\n   * This function handles the value's input.\n   * It validates if it has been already inserted and ignores empty strings.\n   * Also validates against an input[type=\"email\"] which obeys to the RFC 5322.\n   * \n   * @function handleInputValue\n   * @param {object} config\n   * @param {HTMLElement} config.node\n   * @param {array} config.store\n   * @param {string} config.value\n   */\n  function handleInputValue(config) {\n    const value = config.value;\n    const store = config.store;\n\n    if (value) {\n      value.split(\",\").forEach(item => {\n        item = item && item.trim();\n        \n        if (!item) {\n          return;\n        }\n\n\n        const alreadyExists = store.some(record => record.value === item);\n\n        if (alreadyExists) {\n          return;\n        }\n\n        const emailField = document.createElement(\"input\");\n        emailField.type = \"email\";\n        emailField.value = item;\n\n        const isValid = emailField.checkValidity();\n\n        store.push({ value: item, isValid: isValid });\n        config.node.insertAdjacentElement(\n          \"beforebegin\",\n          Pill({ value: item, isValid: isValid, store: store })\n        );\n      });\n    }\n  }\n\n  /**\n   * Generates a Pill component used to display the inserted e-mails.\n   * \n   * @function Pill\n   * @param {object} config\n   * @param {boolean} config.isValid\n   * @param {array} config.store\n   * @param {string} config.value\n   * @returns {HTMLElement} The container div of the pill\n   */\n  function Pill(config) {\n    const containerDiv = document.createElement(\"div\");\n    const span = document.createElement(\"span\");\n    const button = document.createElement(\"button\");\n\n    button.className = \"emails-input__root__pill__button\";\n    containerDiv.className = \"emails-input__root__pill\";\n\n    span.textContent = config.value;\n    button.type = \"button\";\n    button.innerHTML =\n      '<svg focusable=\"false\" tabindex=\"-1\" width=\"8\" height=\"8\" viewBox=\"0 0 8 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">' +\n      '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8 0.8L7.2 0L4 3.2L0.8 0L0 0.8L3.2 4L0 7.2L0.8 8L4 4.8L7.2 8L8 7.2L4.8 4L8 0.8Z\" fill=\"#050038\"/>' +\n      \"</svg>\";\n\n    button.addEventListener(\"click\", e => {\n      const pill = button.parentNode;\n      for (let idx = 0; idx < config.store.length; idx += 1) {\n        if (config.store[idx].value === config.value) {\n          config.store.splice(idx, 1);\n          break;\n        }\n      }\n\n      pill.parentNode.querySelector('input').focus();\n      pill.parentNode.removeChild(pill);\n    });\n\n    containerDiv.insertAdjacentElement(\"afterbegin\", span);\n    containerDiv.insertAdjacentElement(\"beforeend\", button);\n\n    if (!config.isValid) {\n      containerDiv.classList.add(\"emails-input__root__pill--invalid\");\n    }\n\n    /** Prevents the rootDiv from moving the focus to input just by clicking on the pill */\n    containerDiv.addEventListener('click', (e) => e.stopPropagation());\n\n    return containerDiv;\n  }\n\n  /**\n   * Generates an Input (input[type=\"text\"]) component used to type and insert the e-mail\n   * \n   * @function Pill\n   * @param {array} store\n   * @returns {HTMLElement} The container div of the pill\n   */\n  function Input(store) {\n    const input = document.createElement(\"input\");\n    input.className = \"emails-input__root__input\";\n    input.placeholder = \"add more people...\";\n\n    input.addEventListener(\"blur\", e => {\n      const node = e.currentTarget;\n      handleInputValue({ node: node, store: store, value: node.value });\n      e.currentTarget.value = \"\";\n    });\n\n    input.addEventListener(\"keyup\", e => {\n      const node = e.currentTarget;\n\n      /** Handles pressing ',' or 'Enter' */\n      if ([188, 13].indexOf(e.keyCode) !== -1) {\n        handleInputValue({ node: node, store: store, value: node.value });\n        node.value = \"\";\n      }\n\n      /**\n       * Handles pressing backspace to delete items.\n       * It assumes the user is deleting the last item added\n       * since the input is in the end of the list.\n       **/\n      if (e.keyCode === 8 && node.value === \"\") {\n        const pills = input.parentNode.querySelectorAll(\"div\");\n\n        if (pills.length) {\n          node.parentNode.removeChild(pills[pills.length - 1]);\n          store.pop();\n        }\n      }\n    });\n\n    input.addEventListener(\"paste\", e => {\n      const node = e.currentTarget;\n\n      /** IE 11 relies on window.clipboardData to get the pasted text */\n      const value = (e.clipboardData || window.clipboardData).getData(\"text\");\n      handleInputValue({ node: node, store: store, value: value });\n      node.value = \"\";\n\n      /**\n       * Prevents the browser from pasting the content\n       * since this event happens \"before\" the content\n       * is set in the \"value\" attribute\n       **/\n      e.preventDefault();\n    });\n\n    input.addEventListener('click', (e) => e.stopPropagation());\n\n    return input;\n  }\n\n  /**\n   * Generates the emails-input component setting the APIs in the target container\n   * and triggering the subcomponents to render.\n   * Creates and \"owns\" the store where the e-mails are registered.\n   * \n   * @function EmailsInput\n   * @param {HTMLElement} container Target container where to build the emails-input component\n   */\n  function EmailsInput(container) {\n    const subscriptions = [];\n    const emailsStore = [];\n    const rootDiv = document.createElement(\"div\");\n\n    rootDiv.className = \"emails-input__root\";\n\n    /**\n     * Intercepts push, pop and splice to trigger notifications to any subscriptions.\n     * Notice that the subscription always receives a property `data` with an array\n     * of values.\n     **/\n    emailsStore.push = item => {\n      subscriptions.forEach(cb => {\n        cb({ event: \"ADDITION\", data: [{ ...item }] });\n      });\n\n      return Array.prototype.push.call(emailsStore, item);\n    };\n\n    emailsStore.pop = () => {\n      const itemBeingRemoved = Array.prototype.pop.call(emailsStore);\n      subscriptions.forEach(cb => {\n        cb({ event: \"REMOVAL\", data: [{ ...itemBeingRemoved }] });\n      });\n\n      return itemBeingRemoved;\n    };\n\n    emailsStore.splice = (...args) => {\n      const itemsBeingRemoved = Array.prototype.splice.call(\n        emailsStore,\n        ...args\n      );\n\n      subscriptions.forEach(cb => {\n        cb({\n          event: \"REMOVAL\",\n          data: itemsBeingRemoved.map(item => ({ ...item }))\n        });\n      });\n\n      return itemsBeingRemoved;\n    };\n\n    const input = Input(emailsStore);\n\n    rootDiv.addEventListener('click', () => input.focus());\n    rootDiv.insertAdjacentElement(\"beforeend\", input);\n    container.insertAdjacentElement(\"beforeend\", rootDiv);\n\n    /**\n     * Extends the root component with our API ...\n     * If our component had to be removed from the DOM,\n     * a method to cleanup these methods shuold be created.\n     **/\n    container.getAllEmails = function getAllEmails() {\n      return emailsStore.concat([]);\n    };\n\n    container.addNewEmail = function addNewEmail() {\n      handleInputValue({\n        node: input,\n        store: emailsStore,\n        value: generateRandomEmail()\n      });\n    };\n\n    /**\n     * This method implements the observable pattern in which\n     * returns the function to `unsubscribe` when we're done\n     * listening the changes to the store.\n     **/\n    container.subscribe = function subscribe(cb) {\n      if (typeof cb === \"function\") {\n        subscriptions.push(cb);\n      }\n\n      return function unsubscribe() {\n        const idx = subscriptions.indexOf(cb);\n        if (idx !== -1) {\n          subscriptions.splice(idx, 1);\n        }\n      };\n    };\n\n    container.replaceAllEmails = function replaceAllEmails() {\n      /** Removes all pills */\n      Array.prototype.slice\n        .call(rootDiv.querySelectorAll(\"div.emails-input__root__pill\"), 0)\n        .forEach(function(node) {\n          node.parentNode.removeChild(node);\n        });\n\n      /**\n       * Removes the items from the store,\n       * using splice to trigger a notification on subscriptions\n       **/\n      const numberExistingEmails = emailsStore.length;\n      emailsStore.splice(0, emailsStore.length);\n\n      /**\n       * Re-uses the addNewEmail() API to trigger notifications on subscriptions\n       */\n      for (let counter = 0; counter < numberExistingEmails; counter += 1) {\n        container.addNewEmail();\n      }\n    };\n  }\n\n  /** Exposes the method to generate EmailsInput instances */\n  window.EmailsInput = EmailsInput;\n})(window, document);\n"]}